#!/usr/bin/python
# -*- coding: utf-8 -*-

__license__ = """
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: http://golismero-project.com
Golismero project mail: golismero.project<@>gmail.com


This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

# Acnowledgements go to Joxean Koret (@matalaz)
# for the list of URLs we're using in ths plugin.

from golismero.api.config import Config
from golismero.api.text.wordlist import WordListLoader, WordlistNotFound
from golismero.api.data.information.dns import DnsRegister, DnsRegisterCNAME
from golismero.api.net.web_utils import urlparse, split_hostname
from golismero.api.logger import Logger
from golismero.api.plugin import TestingPlugin
from golismero.api.data.vulnerability.malware.dns_poisoning import DNSPoisoning

import traceback


#------------------------------------------------------------------------------
class DNSMalware(TestingPlugin):


    #--------------------------------------------------------------------------
    def get_accepted_info(self):
        return [DnsRegisterCNAME]


    #--------------------------------------------------------------------------
    def recv_info(self, info):

        # Make sure it's really a CNAME record.
        # This check should never fail anyway!
        if info.type != "CNAME":
            Logger.log_error_verbose("No CNAME found, skipped.")
            return

        # Get the root domain.
        root = info.target
        Logger.log_verbose(
            "Looking for poisoned domains at: *.%s" % root)

        # Load the malware URLs list.
        wordlist_filename = Config.plugin_args["wordlist"]
        try:
            wordlist = WordListLoader.get_advanced_wordlist_as_list(
                wordlist_filename)
        except WordlistNotFound:
            Logger.log_error_verbose(
                "Wordlist not found: " + wordlist_filename)
            return
        except TypeError:
            Logger.log_error_verbose(
                "Wordlist is not a file: " + wordlist_filename)
            return

        # Configure the progress notifier.
        self.progress.set_total(len(wordlist))
        self.progress.min_delta = 1  # notify every 1%

        # Iterate through the URLs in the list.
        results = []
        for url in wordlist:

            # Mark as completed before actually trying.
            # We can't put this at the end of the loop where it belongs,
            # because the "continue" statements would skip over this too.
            self.progress.add_completed()

            # Get a URL from the list.
            # Skip empty lines and section headers.
            url = url.strip()
            if not url or url.startswith("["):
                continue

            # Parse a URL from the list and get the hostname.
            try:
                spt  = split_hostname(urlparse(url).hostname)
                name = ".".join((spt[1], spt[2]))
            except Exception:
                tb = traceback.format_exc()
                Logger.log_error_verbose("Error parsing URL: %s" % url)
                Logger.log_error_more_verbose(tb)
                continue

            # Name matches and is NOT in audit scope?
            ##if name == root and all(((name not in x) for x in Config.audit_config.targets)):
            if name == root and name not in Config.audit_scope:

                # Add the vulnerability.
                try:
                    v = DNSPoisoning(name)
                    v.add_resource(info)
                    results.append(v)
                except Exception, e:
                    tb = traceback.format_exc()
                    Logger.log_error(str(e))
                    Logger.log_error_more_verbose(tb)
                    continue

        # Log how many results we got.
        if results:
            Logger.log_verbose("Discovered %s poisoned domains." % len(results))
        else:
            Logger.log_verbose("No poisoned domains found.")

        # Return the results.
        return results
