#!/user/bin/env python
# -*- coding: utf-8 -*-

__license__ = """
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Jekkay Hu | jekkay<@>gmail.com
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: http://golismero-project.com
Golismero project mail: golismero.project<@>gmail.com


This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

from golismero.api.plugin import TestingPlugin
from golismero.api.logger import Logger
from golismero.api.data.resource.url import Url
from golismero.api.external import run_external_tool, tempfile
from golismero.api.data.vulnerability.injection.xss_injection import XSSInjection
from time import time
import os

try:
    from xml.etree import cElementTree as ET
except ImportError:
    from xml.etree import ElementTree as ET


class XSSerplugin(TestingPlugin):
    
    def get_accepted_info(self):
        return [Url]
    
    def recv_info(self, info):
        if not isinstance(info, Url):
            return
        
        if not info.has_url_params and not info.has_post_params:
             Logger.log("URL '%s' has not parameters" % info.url)
             return
         
        # Get xss script executable
        xsser_script = self.get_xsser()

        results = []

        args = [
                "-u",
                info.url,
                ]
        with tempfile(prefix="tmpxss", suffix=".xml") as filename:
            args.extend([
                         "--xml=%s" % filename
                        ])
            if info.has_url_params:
                if self.run_xsser(info.url,xsser_script, args):
                    results.extend(self.parse_xsser_result(info,filename))
        
            if info.has_post_params:
                args.extend([
                             "-p",
                             "&".join([ "%s=%s" % (k, v) for k, v in info.post_params.iteritems()])
                             ])
                if self.run_xsser(info.url,xsser_script, args):
                    results.extend(self.parse_xsser_result(info,filename))        
        
        if results:
            Logger.log("Found %s xss vulns." % len(results))
        else:
            Logger.log("No xss vulns found.")
            

        return results
    
    def run_xsser(self,url,command,args):
        """
        Run xsser target
        
        :param url: the url to be tested
        :type url: str
        
        :param command: path to xsser script
        :type command: str
        
        :param args: the arguments pass to xsser
        :type args: list
        
        :return: return True is run successful, or False for fail
        :rtype: bool   
        """
        Logger.log("Launching xsser against: %s" % url)
        Logger.log_more_verbose("xsser arguments: %s" % " ".join(args))

        t1 = time()
        code = run_external_tool(command, args, callback=Logger.log_verbose)
        t2 = time()

        # Log in extra verbose mode.
        if code:
            Logger.log_error("xsser execution failed, status code: %d" % code)
            return False
        else:
            Logger.log("xsser scan finished in %s seconds for target: %s"% (t2 - t1, url))
            return True
        
    def get_subnode_text(self,node,childname,defaulvalue = None):
        """
        Get the node text
        
        :param node: the xml tree element
        :type node:
        
        :param childname: the child node name
        :type childname: str
        
        :param defaultvalue: return default value if not child node exists
        :type defaultvalue: str or None
        
        :return: child node's text
        :rtype: str|None
        """
        try:
            return node.find(childname).text
        except:
            pass
        return defaulvalue

    def parse_xsser_result(self,target,filename):
        """
        Convert the result to golismero data model
        
        :param target: the dectected url  
        :type target: Url
        
        :param filename: the path to scan result file generated by xsser
        :type filename: str
        
        :return: return the scan result
        :rtype: list(XSSInjection)
        """
        result=[]
        try:
            tree = ET.parse(filename)
            scan = tree.getroot()
            
            # get successful count
            node = scan.find('.//abstract/injections/successful')
            if node is None:
                raise "Error"
            successcount = int(node.text)
            if successcount <= 0:
                raise "No result, stop parsing"
            
            # ger result
            for node in scan.findall(".//results/attack"):
                _injection = self.get_subnode_text(node,"injection",None)
                _browsers  = self.get_subnode_text(node,"browsers","IE")
                _method    = self.get_subnode_text(node,"method","GET")
                if _injection is None:
                    continue
            
                vul = XSSInjection(url = target,
                                   vulnerable_params = {"injection":_injection},
                                   method = _method,
                                   title = "XSS"
                                   )
                vul.description = "XSS vulnerability, browsers:%s" % _browsers
                result.append(vul)

        except:
            pass
        
        return result
    
    def get_xsser(self):
        """
        get xsser script path
        
        :return: return the path to xsser script
        :rtype: str
        """
        return  os.path.join(os.path.dirname(os.path.realpath(__file__)),'xsser/xsser') 
    
    