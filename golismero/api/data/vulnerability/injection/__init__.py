#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: http://golismero-project.com
Golismero project mail: golismero.project<@>gmail.com


This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

"""

This file contains generic interface for injections attacks

"""

__all__ = ["Injection"]

from .. import Vulnerability
from ... import identity


#------------------------------------------------------------------------------
class Injection(Vulnerability):
    """
    Generic injection data
    """

    vulnerability_type = "abstract"

    DEFAULTS = Vulnerability.DEFAULTS.copy()
    DEFAULTS["level"] = "high"


    #--------------------------------------------------------------------------
    def __init__(self, resource, vulnerable_params, injection_point=None, *args, **kwargs):
        """
        :param resource: Resource where the vulnerability was found.
        :type resource: Resource

        :param vulnerable_params: dict as format: {PARAM_NAME : PAYLOAD }
        :type vulnerable_params: dict

        :param injection_point: Injection point. This value depends of the type of injection and can't be None.
        :type injection_point: int
        """
        if not isinstance(injection_point, int):
            raise TypeError("Expected int, got '%s' instead" % type(injection_point))
        if not isinstance(vulnerable_params, dict):
            raise TypeError("Expected dict, got '%s' instead" % type(vulnerable_params))
        if not resource:
            raise TypeError("Resource can't be None")

        # Save the resource.
        self.__affected_resource           = resource
        self.__injection_point             = injection_point
        self.__vulnerable_params           = vulnerable_params

        # Parent constructor.
        super(Injection, self).__init__(*args, **kwargs)

        self.title = "SQL Injection"


        # Link the vulnerability to the domain.
        self.add_resource(resource)

    __init__.__doc__ += Vulnerability.__init__.__doc__


    #----------------------------------------------------------------------
    @identity
    def affected_resource(self):
        """
        :return: Resource where the vulnerability was found.
        :rtype: Resource
        """
        return self.__affected_resource


    #----------------------------------------------------------------------
    @identity
    def injection_point(self):
        """
        :return: dict as format: {PARAM_NAME : PAYLOAD }
        :rtype: dict
        """
        return self.__injection_point


    #----------------------------------------------------------------------
    @identity
    def vulnerable_params(self):
        """
        :return: Injection point. This value depends of the type of injection and can't be None.
        :rtype: int
        """
        return self.__vulnerable_params


#------------------------------------------------------------------------------
class HTTPInjection(Injection):
    """
    Injection related with web services.
    """

    INJECTION_POINT_FIRST        = 0
    INJECTION_POINT_URL          = 2
    INJECTION_POINT_HEADER       = 3
    INJECTION_POINT_BODY         = 4
    INJECTION_POINT_COOKIE       = 5
    INJECTION_POINT_END          = INJECTION_POINT_COOKIE

    #--------------------------------------------------------------------------
    def __init__(self, url, vulnerable_params, injection_point=None, method = "GET", *args, **kwargs):
        """
        :param url: url where the vulnerability was found.
        :type url: url

        :param vulnerable_params: dict as format: {PARAM_NAME : PAYLOAD }
        :type vulnerable_params: dict

        :param injection_point: Injection point. This value depends of the type of injection and can't be None.
        :type injection_point: int

        :param method: HTTP method to explode the vuln.
        :type method: str
        """

        self.__method             = method

        # Parent constructor.
        super(HTTPInjection, self).__init__(url, vulnerable_params, injection_point, *args, **kwargs)


    #----------------------------------------------------------------------
    @property
    def method(self):
        """
        :return: HTTP method to explode the vuln.
        :rtype: str
        """
        return self.__method


    #----------------------------------------------------------------------
    @staticmethod
    def str2injection_point(text):
        """
        From a text, get the value os injection point, for example:

        >>> HTTPInjection.str2injection("GET") # URL
        2
        >>> HTTPInjection.str2injection("cookie") # URL
        5

        :param text: string with injection point or HTTP method name or common HTTP header.
        :type text: str

        :return: int with the injection point.
        :type: int | None if unknown
        """
        RESOLVER = {
            # HTTP common method
            'get'          : HTTPInjection.INJECTION_POINT_URL,
            'post'         : HTTPInjection.INJECTION_POINT_URL,
            'put'          : HTTPInjection.INJECTION_POINT_URL,
            'delete'       : HTTPInjection.INJECTION_POINT_URL,
            'head'         : HTTPInjection.INJECTION_POINT_URL,
            'options'      : HTTPInjection.INJECTION_POINT_URL,
            'trace'        : HTTPInjection.INJECTION_POINT_URL,

            # Cookie + body
            'cookie'        : HTTPInjection.INJECTION_POINT_COOKIE,
            'body'          : HTTPInjection.INJECTION_POINT_BODY,

            # Common HTTP field
            'user-agent'    : HTTPInjection.INJECTION_POINT_HEADER,
            'accept'        : HTTPInjection.INJECTION_POINT_HEADER,
            'host'          : HTTPInjection.INJECTION_POINT_HEADER,
            'date'          : HTTPInjection.INJECTION_POINT_HEADER,
            'via'           : HTTPInjection.INJECTION_POINT_HEADER,
        }

        try:
            return RESOLVER[text.lower().strip()]
        except KeyError:
            return None


